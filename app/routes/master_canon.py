from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
import json
import random
from pathlib import Path

from app.deps.auth import mj_required
from app.services.llm_engine import run_llm
from app.services.narrative_core import NARRATIVE
from app.services.game_state import GAME_STATE
from app.services.narrative_engine import generate_canon_and_intro  # pour ton endpoint combin√©
from app.services.ws_manager import ws_broadcast_safe

router = APIRouter(
    prefix="/master",
    tags=["master"],
    dependencies=[Depends(mj_required)]
)

SEED_PATH = Path("app/data/story_seed.json")
CANON_PATH = Path("app/data/canon_narratif.json")


# ====================================================
# üîπ 1. G√âN√âRATION DU CANON NARRATIF SEUL
# ====================================================

class CanonRequest(BaseModel):
    style: str | None = None  # ex: "Gothique, dramatique"


def load_seed() -> dict:
    """Charge le contexte narratif de la partie."""
    if SEED_PATH.exists():
        try:
            with open(SEED_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}


@router.post("/generate_canon")
async def generate_canon(p: CanonRequest):
    """
    G√©n√®re automatiquement un canon narratif :
    - Arme, lieu et mobile g√©n√©r√©s par le LLM
    - Coupable tir√© au hasard parmi les joueurs
    """
    seed = load_seed()

    prompt = f"""
    Tu es le moteur narratif d'une Murder Party.

    Contexte de l'histoire :
    Cadre : {seed.get("setting", "Un manoir myst√©rieux.")}
    Situation : {seed.get("context", "Un d√Æner qui tourne mal.")}
    Victime : {seed.get("victim", "Un notable local.")}
    Ton : {p.style or seed.get("tone", "Dramatique, r√©aliste")}.

    G√©n√®re uniquement les √©l√©ments narratifs suivants au format JSON :
    {{
      "weapon": "<arme du crime>",
      "location": "<lieu du crime>",
      "motive": "<mobile du crime>"
    }}

    Contrainte : renvoie uniquement un JSON valide sans commentaire ni texte hors JSON.
    """

    try:
        result = run_llm(prompt)
        text = result.get("text", "").strip()

        try:
            canon = json.loads(text)
        except json.JSONDecodeError:
            start, end = text.find("{"), text.rfind("}")
            if start >= 0 and end > start:
                canon = json.loads(text[start:end+1])
            else:
                raise

        # Tirage du coupable parmi les joueurs
        if not GAME_STATE.players:
            raise HTTPException(status_code=400, detail="Aucun joueur inscrit, impossible de d√©signer un coupable.")

        culprit_id, culprit_data = random.choice(list(GAME_STATE.players.items()))
        culprit_name = culprit_data.get("character") or culprit_data.get("display_name") or culprit_id

        canon["culprit_player_id"] = culprit_id
        canon["culprit_name"] = culprit_name
        canon["locked"] = True

        # Sauvegarde
        NARRATIVE.canon = canon
        NARRATIVE.save()

        GAME_STATE.log_event("canon_locked", {
            "weapon": canon["weapon"],
            "location": canon["location"],
            "motive": canon["motive"],
            "culprit_player_id": culprit_id
        })

        return {"ok": True, "canon": canon}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur LLM ou logique canon: {e}")


# ====================================================
# üîπ 2. G√âN√âRATION DU CANON + INTRO (ta version combin√©e)
# ====================================================

@router.post("/generate_canon_with_intro")
async def generate_canon_with_intro():
    """
    G√©n√®re un canon narratif complet + l'introduction immersive.
    """
    try:
        result = generate_canon_and_intro()
        return {"ok": True, **result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur g√©n√©ration canon + intro: {e}")


# ====================================================
# üîπ 3. G√âN√âRATION UNIQUEMENT DE L‚ÄôINTRO
# ====================================================

@router.post("/intro")
async def generate_intro():
    """
    G√©n√®re et diffuse la narration d‚Äôintroduction √† partir du canon verrouill√©.
    """
    try:
        if not CANON_PATH.exists():
            raise HTTPException(status_code=404, detail="Canon narratif introuvable")

        with open(CANON_PATH, "r", encoding="utf-8") as f:
            canon = json.load(f)

        weapon = canon.get("weapon", "une arme myst√©rieuse")
        location = canon.get("location", "un lieu inconnu")
        motive = canon.get("motive", "un mobile flou")
        tone = canon.get("tone", "dramatique, immersif")
        victim = canon.get("victim", "la victime")
        culprit = canon.get("culprit_name", "l‚Äôun des invit√©s")

        prompt = f"""
        Tu es le narrateur d'une Murder Party.

        Contexte :
        - Lieu du crime : {location}
        - Arme : {weapon}
        - Mobile : {motive}
        - Victime : {victim}
        - Ton : {tone}

        T√¢che :
        R√©dige une courte introduction immersive (4-6 phrases maximum) pour ouvrir la soir√©e.
        Elle doit √©voquer l‚Äôambiance, le drame, et installer le myst√®re, sans r√©v√©ler le coupable.

        R√©ponds avec un texte brut, sans balise, sans JSON.
        """

        res = run_llm(prompt)
        intro_text = (res.get("text") or "").strip()

        entry = {
            "event": "intro",
            "text": intro_text,
            "scope": "broadcast",
        }
        canon.setdefault("timeline", []).append(entry)

        with open(CANON_PATH, "w", encoding="utf-8") as f:
            json.dump(canon, f, ensure_ascii=False, indent=2)

        # Diffusion WS
        ws_broadcast_safe({
            "type": "narration",
            "scope": "broadcast",
            "payload": {
                "event": "intro",
                "text": intro_text
            }
        })

        return {
            "ok": True,
            "intro_text": intro_text,
            "public_path": "/public/intro",
            "canon_file": "canon_narratif.json"
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
